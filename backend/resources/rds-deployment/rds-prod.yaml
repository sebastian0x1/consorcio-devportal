# Creción de instancia de RDS y recursos para proteger el acceso a la base de datos mediante bastion
# Los recursos creados son:
#   Instancia RDS: Crea la DB con el motor mariadb
#   Instancia EC2: Nos permitirá conectarnos mediante ssh para comunicarnos con la DB

#   Security Group de Bastion: Asociado a la VPC
#   Inbound rules del BastionSecurityGroup: ip y puertos
#   Outbound rules del BastionSecurityGroup: ip y puertos

#   Security Group de RDS: Asociado a la VPC
#   Inbound rules del RdsSecurityGroup: ip y puertos
#   Outbound rules del RdsSecurityGroup: ip y puertos

#   VPC: VPC dónde estarán las subnets y los recursos
#   Subnet Group de RDS: se asocian las dos subnets de la vpc
#   Subnet pública: Subnet pública que estará asociada la instancia EC2
#   Subnet privada: Permite a las lambdas conectarse a RDS

#   Internet Gateway: IG para comunicarse mediante internet con la VPC
#   VPCGatewayAttachment: Asocia el IG a la VPC
#   RouteTable: Se definen las reglas (rutas) para poder tener acceso a los recursos
#   Route: Vincula el IG con la RouteTable y define quién tiene acceso a los recursos
#   SubnetRouteTableAssociation: Conecta la Subnet, la VPC junto con la tabla de ruta que da acceso para poder llegar a la instancia EC2

Parameters:
  BastionImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs'
  BastionKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: 'EC2 key used to connect to the bastion host'
  ServiceName:
    Type: String
  DBName:
    Type: String
  DbArnSecret:
    Type: String
  horario:
    Type: String
    Default: 'lu-vi 800-1900'
  VPC:
    Type: String
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
  PrivateSubnet3:
    Type: String

Resources:
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      MasterUsername: !Sub '{{resolve:secretsmanager:${DbArnSecret}:SecretString:MYSQL_USER}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DbArnSecret}:SecretString:MYSQL_PASSWORD}}'
      Engine: mariadb
      EngineVersion: 10.5.13
      AllocatedStorage: 20
      PubliclyAccessible: false
      MaxAllocatedStorage: 1000
      BackupRetentionPeriod: 7
      StorageType: gp2
      #DBInstanceIdentifier: cs-portal
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      Tags:
        - Key: CC
          Value: 9301
        - Key: Proyecto
          Value: Dev Portal
        - Key: ambiente
          Value: ci-cd
        - Key: idAplicativo
          Value: Dev Portal
        - Key: responsable
          Value: ingenieria
        - Key: lineaNegocio
          Value: Transversales
        - Key: horarioEncendido
          Value: !Ref horario
        - Key: backup
          Value: bronze

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      DBSubnetGroupName: !Sub '${ServiceName}-dbsubnetgroup'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${ServiceName}-DBSubnetGroup'
        - Key: CC
          Value: 9301
        - Key: Proyecto
          Value: Dev Portal
        - Key: ambiente
          Value: ci-cd
        - Key: idAplicativo
          Value: Dev Portal
        - Key: responsable
          Value: ingenieria

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${ServiceName}'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: name
          Value: !Sub '${ServiceName}-RdsSecurityGroup'
        - Key: CC
          Value: 9301
        - Key: Proyecto
          Value: Dev Portal
        - Key: ambiente
          Value: ci-cd
        - Key: idAplicativo
          Value: Dev Portal
        - Key: responsable
          Value: ingenieria

  # VirtualNetworkPublicSubnetsInternetGatewayAttachment:
  #   Metadata:
  #     StackeryManaged: true
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     InternetGatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
  #     VpcId: !Ref VPC
  #     # Tags:
  #     # - Key: 'CC'
  #     #   Value: 'POR CONFIRMAR'
  #     # - Key: 'proyecto'
  #     #   Value: 'Proyecto1'
  #     # - Key: 'ambiente'
  #     #   Value: 'ci-cd'
  #     # - Key: 'idAplicativo'
  #     #   Value: 'Dev Portal'
  #     # - Key: 'responsable'
  #     #   Value: 'POR CONFIRMAR'

  # VirtualNetworkPublicSubnetsRouteTable:
  #   Metadata:
  #     StackeryManaged: true
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${ServiceName}-VirtualNetworkPublicSubnetsRouteTable'
  #       - Key: CC
  #         Value: 9301
  #       - Key: Proyecto
  #         Value: Dev Portal
  #       - Key: ambiente
  #         Value: ci-cd
  #       - Key: idAplicativo
  #         Value: Dev Portal
  #       - Key: responsable
  #         Value: ingenieria
  #     VpcId: !Ref VPC

  # VirtualNetworkPublicSubnetsInternetGatewayRoute:
  #   Metadata:
  #     StackeryManaged: true
  #   Type: AWS::EC2::Route
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
  #     RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
  #     # Tags:
  #     # - Key: 'CC'
  #     #   Value: 'POR CONFIRMAR'
  #     # - Key: 'proyecto'
  #     #   Value: 'Proyecto1'
  #     # - Key: 'ambiente'
  #     #   Value: 'ci-cd'
  #     # - Key: 'idAplicativo'
  #     #   Value: 'Dev Portal'
  #     # - Key: 'responsable'
  #     #   Value: 'POR CONFIRMAR'

  # VirtualNetworkPublicSubnet1RouteTableAssociation:
  #   Metadata:
  #     StackeryManaged: true
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
  #     SubnetId: !Ref PublicSubnet1
  #     # Tags:
  #     # - Key: 'CC'
  #     #   Value: 'POR CONFIRMAR'
  #     # - Key: 'proyecto'
  #     #   Value: 'Proyecto1'
  #     # - Key: 'ambiente'
  #     #   Value: 'ci-cd'
  #     # - Key: 'idAplicativo'
  #     #   Value: 'Dev Portal'
  #     # - Key: 'responsable'
  #     #   Value: 'POR CONFIRMAR'

Outputs:
  EndPoint:
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'EndPoint']]
  VPCDefaultSecurityGroup:
    Value: !Ref RdsSecurityGroup
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'SGRDS']]
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'VPC']]
  PrivateSubnet1ID:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'PrivateSubnet1']]
  PrivateSubnet2ID:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'PrivateSubnet2']]
  PrivateSubnet3ID:
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'PrivateSubnet3']]


